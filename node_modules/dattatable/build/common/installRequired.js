"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstallationRequired = void 0;
var gd_sprest_bs_1 = require("gd-sprest-bs");
var loadingDialog_1 = require("./loadingDialog");
var modal_1 = require("./modal");
/**
 * Installation Required
 * Checks the SharePoint configuration file to see if an install is required.
 */
var InstallationRequired = /** @class */ (function () {
    function InstallationRequired() {
    }
    Object.defineProperty(InstallationRequired, "ListsExist", {
        get: function () { return this._listsExist; },
        enumerable: false,
        configurable: true
    });
    // Checks the lists
    InstallationRequired.checkLists = function () {
        var _this = this;
        // Clear the flag
        this._listsExist = true;
        // Return a promise
        return new Promise(function (resolve) {
            // Parse the lists
            gd_sprest_bs_1.Helper.Executor(_this._cfg._configuration.ListCfg, function (listCfg) {
                // Return a promise
                return new Promise(function (resolve) {
                    // Get the list
                    (0, gd_sprest_bs_1.Web)().Lists(listCfg.ListInformation.Title).query({
                        Expand: ["Fields"]
                    }).execute(
                    // Success
                    function (list) {
                        // Parse the custom fields
                        gd_sprest_bs_1.Helper.Executor(listCfg.CustomFields, function (cfg) {
                            var exists = false;
                            // Parse the list fields
                            for (var i = 0; i < list.Fields.results.length; i++) {
                                // See if the field exists
                                if (list.Fields.results[i].InternalName == cfg.name) {
                                    // Set the flag
                                    exists = true;
                                    break;
                                }
                            }
                            // See if the field doesn't exist
                            if (!exists) {
                                // Field doesn't exist
                                _this._report.push("List '" + listCfg.ListInformation.Title + "' is missing a field: " + cfg.name);
                            }
                        }).then(function () {
                            // Resolve the promise
                            resolve(null);
                        });
                    }, 
                    // Error
                    function () {
                        // List doesn't exist
                        _this._report.push("List '" + listCfg.ListInformation.Title + "' does not exist");
                        // Set the flag
                        _this._listsExist = false;
                        // Resolve the promise
                        resolve(null);
                    });
                });
            }).then(function () {
                // Resolve the request
                resolve();
            });
        });
    };
    // Checks the configuration to see if an installation is required
    InstallationRequired.requiresInstall = function (cfg) {
        var _this = this;
        // Save the configuration
        this._cfg = cfg;
        // Clear the report
        this._report = [];
        // Return a promise
        return new Promise(function (resolve) {
            // Check the lists
            _this.checkLists().then(function () {
                // Resolve the request
                resolve(_this._report.length > 0);
            });
        });
    };
    InstallationRequired.showDialog = function (props) {
        var _this = this;
        if (props === void 0) { props = {}; }
        // Clear the modal
        modal_1.Modal.clear();
        // Set the header
        modal_1.Modal.setHeader("Installation Required");
        // Set the body
        modal_1.Modal.setBody(gd_sprest_bs_1.Components.Card({
            body: [
                {
                    text: props.errors && props.errors.length > 0 ?
                        "An installation is required. The following were missing in your environment:" :
                        "No errors were detected."
                },
                {
                    onRender: function (el) {
                        var items = props.errors || [];
                        // Parse the report
                        for (var i = 0; i < _this._report.length; i++) {
                            // Add the item
                            items.push({ content: _this._report[i] });
                        }
                        // Render a list
                        gd_sprest_bs_1.Components.ListGroup({
                            el: el,
                            items: items
                        });
                    }
                }
            ]
        }).el);
        // Render the install button
        var btnInstall = null;
        gd_sprest_bs_1.Components.Tooltip({
            el: modal_1.Modal.FooterElement,
            content: "Installs the SharePoint Assets",
            btnProps: {
                assignTo: function (btn) { btnInstall = btn; },
                text: "Install",
                type: gd_sprest_bs_1.Components.ButtonTypes.OutlineSuccess,
                onClick: function () {
                    // Show a loading dialog
                    loadingDialog_1.LoadingDialog.setHeader("Installing the Solution");
                    loadingDialog_1.LoadingDialog.setBody("This will close after the assets are installed.");
                    loadingDialog_1.LoadingDialog.show();
                    _this._cfg.install().then(function () {
                        // Hide the button
                        btnInstall.hide();
                        // Show the refresh button
                        btnRefresh.show();
                        // Close the dialog
                        loadingDialog_1.LoadingDialog.hide();
                    });
                }
            }
        });
        // Render the refresh button
        var btnRefresh = null;
        gd_sprest_bs_1.Components.Tooltip({
            el: modal_1.Modal.FooterElement,
            content: "Refresh the Page",
            btnProps: {
                assignTo: function (btn) { btnRefresh = btn; },
                className: "d-none",
                text: "Refresh",
                type: gd_sprest_bs_1.Components.ButtonTypes.OutlinePrimary,
                onClick: function () {
                    // Refresh the page
                    window.location.reload();
                }
            }
        });
        // Call the events
        props.onHeaderRendered ? props.onHeaderRendered(modal_1.Modal.HeaderElement) : null;
        props.onBodyRendered ? props.onBodyRendered(modal_1.Modal.BodyElement) : null;
        props.onFooterRendered ? props.onFooterRendered(modal_1.Modal.FooterElement) : null;
        // Show the modal
        modal_1.Modal.show();
    };
    InstallationRequired._cfg = null;
    InstallationRequired._report = null;
    // Lists exists
    InstallationRequired._listsExist = null;
    return InstallationRequired;
}());
exports.InstallationRequired = InstallationRequired;
