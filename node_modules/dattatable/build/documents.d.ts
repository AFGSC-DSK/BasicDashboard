import { Components, Helper, Types } from "gd-sprest-bs";
import { DataTable, IDataTableProps } from "./dashboard/table";
/** Action Button Types */
export declare enum ActionButtonTypes {
    Delete = 1,
    Download = 2,
    Edit = 3,
    Properties = 4,
    View = 5
}
/**
 * Properties
 */
export interface IDocumentsProps {
    canDelete?: boolean;
    canEdit?: boolean;
    canView?: boolean;
    docSetId?: number;
    itemId?: number;
    el: HTMLElement;
    enableSearch?: boolean;
    listName: string;
    query?: Types.IODataQuery;
    onActionsRendered?: (el: HTMLElement, col: Components.ITableColumn, file: Types.SP.Attachment | Types.SP.File) => void;
    onFileAdded?: (file?: Types.SP.Attachment | Types.SP.File) => void;
    onFileAdding?: (fileInfo?: Helper.IListFormAttachmentInfo) => PromiseLike<boolean> | boolean;
    onFilterRendered?: (el: HTMLElement) => void;
    onItemFormEditing?: {
        onCreateEditForm?: (props: Components.IListFormEditProps) => Components.IListFormEditProps;
        onFormButtonsRendering?: (buttons: Components.IButtonProps[]) => Components.IButtonProps[];
        onGetListInfo?: (props: Helper.IListFormProps) => Helper.IListFormProps;
        onSave?: (values: any) => any | PromiseLike<any>;
        onSetFooter?: (el: HTMLElement) => void;
        onSetHeader?: (el: HTMLElement) => void;
        onUpdate?: (item?: any) => void;
        onValidation?: (values?: any) => boolean | PromiseLike<boolean>;
        useModal?: boolean;
    };
    onItemFormViewing?: {
        onCreateViewForm?: (props: Components.IListFormDisplayProps) => Components.IListFormDisplayProps;
        onFormButtonsRendering?: (buttons: Components.IButtonProps[]) => Components.IButtonProps[];
        onGetListInfo?: (props: Helper.IListFormProps) => Helper.IListFormProps;
        onSetFooter?: (el: HTMLElement) => void;
        onSetHeader?: (el: HTMLElement) => void;
        useModal?: boolean;
    };
    onNavigationRendering?: (props: Components.INavbarProps) => void;
    onNavigationRendered?: (nav: Components.INavbar) => void;
    onRefresh?: () => void;
    onRendered?: (el?: HTMLElement) => void;
    onSearchRendered?: (el?: HTMLElement) => void;
    onShowFilter?: Function;
    table?: {
        columns?: Components.ITableColumn[];
        dtProps?: any;
        onRendering?: (props?: IDataTableProps) => void;
        onRendered?: (el?: HTMLElement, dt?: any) => void;
    };
    templatesUrl?: string;
    webUrl?: string;
}
/**
 * Documents
 * Renders a data table containing the contents of a document library.
 */
export declare class Documents {
    private _el;
    private _props;
    private _tblProps;
    constructor(props: IDocumentsProps);
    /** The list item attachments */
    private _attachments;
    get Attachments(): Types.SP.Attachment[];
    /** The data table */
    private _dt;
    get DataTable(): DataTable;
    private _canDelete;
    get CanDelete(): boolean;
    private _canEdit;
    get CanEdit(): boolean;
    private _canView;
    get CanView(): boolean;
    get Files(): Types.SP.File[];
    get IsAttachment(): boolean;
    get IsDocSet(): boolean;
    private _navbar;
    get Navigation(): Components.INavbar;
    get NavigationElement(): HTMLElement;
    private _rootFolder;
    get RootFolder(): Types.SP.FolderOData;
    get TableElement(): HTMLElement;
    private _templatesFiles;
    get TemplateFiles(): Types.SP.File[];
    private _templateFolders;
    get TemplateFolders(): Types.SP.Folder[];
    /**
     * Copies a file to a folder to the library
     * @param item The dropdown item containing the file/folder to copy.
     */
    private copyFile;
    private generateColumns;
    private generateItems;
    private generateTableProps;
    private getFileName;
    static isWopi(filename: string): boolean;
    private load;
    private render;
    private renderActionButtons;
    private generateButton;
    private renderFileIcon;
    private renderNavigation;
    private renderTable;
    private uploadFile;
    /** Public Methods */
    generateActionButton(btnType: number, file: Types.SP.File): HTMLElement;
    refresh(): void;
    search(value: string): void;
}
