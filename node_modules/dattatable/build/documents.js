"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Documents = exports.ActionButtonTypes = void 0;
var gd_sprest_bs_1 = require("gd-sprest-bs");
var jQuery = require("jquery");
var moment = require("moment");
var loadingDialog_1 = require("./common/loadingDialog");
var methods_1 = require("./common/methods");
var table_1 = require("./dashboard/table");
var itemForm_1 = require("./itemForm");
/** Icons */
var fileEarmark_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmark");
var fileEarmarkArrowDown_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkArrowDown");
var fileEarmarkArrowUp_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkArrowUp");
var fileEarmarkBarGraph_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkBarGraph");
var fileEarmarkBinary_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkBinary");
var fileEarmarkCode_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkCode");
var fileEarmarkExcel_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkExcel");
var fileEarmarkImage_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkImage");
var fileEarmarkMusic_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkMusic");
var fileEarmarkPdf_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkPdf");
var fileEarmarkPlus_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkPlus");
var fileEarmarkPpt_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkPpt");
var fileEarmarkPlay_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkPlay");
var fileEarmarkRichtext_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkRichtext");
var fileEarmarkSpreadsheet_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkSpreadsheet");
var fileEarmarkText_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkText");
var fileEarmarkWord_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkWord");
var fileEarmarkZip_1 = require("gd-sprest-bs/build/icons/svgs/fileEarmarkZip");
var filterSquare_1 = require("gd-sprest-bs/build/icons/svgs/filterSquare");
var front_1 = require("gd-sprest-bs/build/icons/svgs/front");
var inputCursorText_1 = require("gd-sprest-bs/build/icons/svgs/inputCursorText");
var layoutTextSidebar_1 = require("gd-sprest-bs/build/icons/svgs/layoutTextSidebar");
var x_1 = require("gd-sprest-bs/build/icons/svgs/x");
/** Action Button Types */
var ActionButtonTypes;
(function (ActionButtonTypes) {
    ActionButtonTypes[ActionButtonTypes["Delete"] = 1] = "Delete";
    ActionButtonTypes[ActionButtonTypes["Download"] = 2] = "Download";
    ActionButtonTypes[ActionButtonTypes["Edit"] = 3] = "Edit";
    ActionButtonTypes[ActionButtonTypes["Properties"] = 4] = "Properties";
    ActionButtonTypes[ActionButtonTypes["View"] = 5] = "View";
})(ActionButtonTypes = exports.ActionButtonTypes || (exports.ActionButtonTypes = {}));
/**
 * Documents
 * Renders a data table containing the contents of a document library.
 */
var Documents = /** @class */ (function () {
    // Constructor
    function Documents(props) {
        this._el = null;
        this._props = null;
        this._tblProps = null;
        /** The list item attachments */
        this._attachments = null;
        /** The data table */
        this._dt = null;
        // Can delete documents
        this._canDelete = true;
        // Can edit documents
        this._canEdit = true;
        // Can view documents
        this._canView = true;
        // The navigation component
        this._navbar = null;
        // The root folder of the library
        this._rootFolder = null;
        // The template files
        this._templatesFiles = null;
        // The template folders
        this._templateFolders = null;
        // Save the properties
        this._props = props;
        // Default the permissions
        this._canDelete = typeof (this._props.canDelete) === "boolean" ? this._props.canDelete : true;
        this._canEdit = typeof (this._props.canEdit) === "boolean" ? this._props.canEdit : true;
        this._canView = typeof (this._props.canView) === "boolean" ? this._props.canView : true;
        // Create the element
        this._el = document.createElement("div");
        this._props.el ? this._props.el.appendChild(this._el) : null;
        // Generate the table properties
        this.generateTableProps();
        // Render the component
        this.render();
    }
    Object.defineProperty(Documents.prototype, "Attachments", {
        get: function () { return this._attachments; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Documents.prototype, "DataTable", {
        get: function () { return this._dt; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Documents.prototype, "CanDelete", {
        get: function () { return this._canDelete; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Documents.prototype, "CanEdit", {
        get: function () { return this._canEdit; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Documents.prototype, "CanView", {
        get: function () { return this._canView; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Documents.prototype, "Files", {
        // The files
        get: function () {
            // Default the files to the root folder
            var files = this.RootFolder.Files.results;
            // Parse the folders
            var formsFl = false;
            for (var i = 0; i < this.RootFolder.Folders.results.length; i++) {
                var folder = this.RootFolder.Folders.results[i];
                // Skip the internal forms folder
                if (!formsFl && folder.Name == "Forms") {
                    // Set the flag and skip this folder
                    formsFl = true;
                    continue;
                }
                // Append files
                files = files.concat(folder.Files.results);
            }
            // Return the files
            return files;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Documents.prototype, "IsAttachment", {
        // Type of object we are dealing with
        get: function () { return this._props.itemId > 0; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Documents.prototype, "IsDocSet", {
        get: function () { return this._props.docSetId > 0; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Documents.prototype, "Navigation", {
        get: function () { return this._navbar; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Documents.prototype, "NavigationElement", {
        // The navigation element
        get: function () { return this.Navigation.el; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Documents.prototype, "RootFolder", {
        get: function () { return this._rootFolder; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Documents.prototype, "TableElement", {
        // The table element
        get: function () { return this.DataTable.el; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Documents.prototype, "TemplateFiles", {
        get: function () { return this._templatesFiles; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Documents.prototype, "TemplateFolders", {
        get: function () { return this._templateFolders; },
        enumerable: false,
        configurable: true
    });
    /**
     * Copies a file to a folder to the library
     * @param item The dropdown item containing the file/folder to copy.
     */
    Documents.prototype.copyFile = function (item) {
        var _this = this;
        // Show a loading dialog
        loadingDialog_1.LoadingDialog.setHeader("Initializing the Transfer");
        loadingDialog_1.LoadingDialog.setBody("Copying the file(s) to the workspace...");
        loadingDialog_1.LoadingDialog.show();
        // See if this is a folder
        if (item.data.Files) {
            // Parse the files
            var folder = item.data;
            gd_sprest_bs_1.Helper.Executor(folder.Files.results, function (file) {
                // Return a promise
                return new Promise(function (resolve) {
                    // Get the file contents
                    (0, gd_sprest_bs_1.Web)(_this._props.webUrl).getFileByServerRelativeUrl(file.ServerRelativeUrl).content().execute(function (data) {
                        // Copy the file
                        (0, gd_sprest_bs_1.Web)(_this._props.webUrl).getFolderByServerRelativeUrl(_this._rootFolder.ServerRelativeUrl).Files().add(file.Name, true, data).execute(resolve, resolve);
                    });
                });
            }).then(function () {
                // Close the dialog
                loadingDialog_1.LoadingDialog.hide();
                // Refresh the page
                _this.refresh();
            });
        }
        else {
            // Copy the file
            var file_1 = item.data;
            file_1.content().execute(function (data) {
                // Copy the file
                (0, gd_sprest_bs_1.Web)(_this._props.webUrl).getFolderByServerRelativeUrl(_this._rootFolder.ServerRelativeUrl).Files().add(file_1.Name, true, data).execute(function () {
                    // Close the dialog
                    loadingDialog_1.LoadingDialog.hide();
                    // Refresh the page
                    _this.refresh();
                });
            });
        }
    };
    // Generates the table columns
    Documents.prototype.generateColumns = function () {
        // See if the columns were provided
        if (this._props.table && this._props.table.columns) {
            return this._props.table.columns;
        }
        // See if we are dealing w/ attachments
        if (this.IsAttachment) {
            // Return the default columns
            return [
                {
                    name: "Type",
                    title: "Type"
                },
                {
                    name: "FileName",
                    title: "Name"
                },
                {
                    className: "text-end text-nowrap",
                    name: "Actions",
                    title: ""
                }
            ];
        }
        // Return the default columns
        return [
            {
                name: "Type",
                title: "Type",
            },
            {
                name: "Name",
                title: "Name"
            },
            {
                name: "Title",
                title: "Description"
            },
            {
                name: "FileSize",
                title: "File Size"
            },
            {
                name: "Created",
                title: "Created"
            },
            {
                name: "Author",
                title: "Created By"
            },
            {
                name: "Modified",
                title: "Modified"
            },
            {
                name: "ModifiedBy",
                title: "Modified By"
            },
            {
                className: "text-end text-nowrap",
                name: "Actions",
                title: ""
            }
        ];
    };
    // Generates the template files/folders dropdown items
    Documents.prototype.generateItems = function () {
        var _this = this;
        var items = [];
        // Parse the template folders
        for (var i = 0; i < this.TemplateFolders.length; i++) {
            var folder = this.TemplateFolders[i];
            // Skip the internal forms folder
            if (folder.Name == "Forms") {
                continue;
            }
            // Add a dropdown item
            items.push({
                text: folder.Name,
                data: folder,
                value: folder.ServerRelativeUrl,
                onClick: function (item) { _this.copyFile(item); }
            });
        }
        // Parse the template files
        for (var i = 0; i < this.TemplateFiles.length; i++) {
            var file = this.TemplateFiles[i];
            // Add a dropdown item
            items.push({
                text: file.Name,
                data: file,
                value: file.ServerRelativeUrl,
                onClick: function (item) { _this.copyFile(item); }
            });
        }
        // Return the dropdown items
        return items.sort(function (a, b) {
            if (a.text < b.text) {
                return -1;
            }
            if (a.text > b.text) {
                return 1;
            }
            return 0;
        });
    };
    // Generates the table properties
    Documents.prototype.generateTableProps = function () {
        var _this = this;
        // Default the indexes for the type and action buttons
        var idxActions = this.IsAttachment ? 2 : 8;
        // See if custom columns are defined
        if (this._props.table && this._props.table.columns) {
            // Clear the indexes
            idxActions = -1;
            // Parse the columns
            for (var i = 0; i < this._props.table.columns.length; i++) {
                // Update the index based on the value
                switch (this._props.table.columns[i].name) {
                    // Actions
                    case "Actions":
                        idxActions = i;
                        break;
                }
            }
        }
        // See if the column definitions are not defined
        var columnDefs = this._props.table ? this._props.table.dtProps : null;
        if (columnDefs == null) {
            columnDefs = [];
            // Add the default options for the Actions and Type
            idxActions >= 0 ? columnDefs.push({ targets: idxActions, orderable: false, searchable: false }) : null;
        }
        // Create the table properties
        this._tblProps = {
            el: null,
            dtProps: this._props.table && this._props.table.dtProps ? this._props.table.dtProps : {
                dom: 'rt<"row"<"col-sm-4"l><"col-sm-4"i><"col-sm-4"p>>',
                columnDefs: columnDefs,
                createdRow: function (row, data, index) {
                    jQuery('td', row).addClass('align-middle');
                },
                // Add some classes to the dataTable elements
                drawCallback: function (settings) {
                    var api = new jQuery.fn.dataTable.Api(settings);
                    var div = api.table().container();
                    var table = api.table().node();
                    div.querySelector(".dataTables_info").classList.add("text-center");
                    div.querySelector(".dataTables_length").classList.add("pt-2");
                    div.querySelector(".dataTables_paginate").classList.add("pt-03");
                    table.classList.remove("no-footer");
                    table.classList.add("tbl-footer");
                    table.classList.add("table-striped");
                },
                headerCallback: function (thead, data, start, end, display) {
                    jQuery('th', thead).addClass('align-middle');
                },
                // Order by the 1st column by default; ascending
                order: [[1, "asc"]]
            },
            columns: this.generateColumns()
        };
        // Parse the columns
        gd_sprest_bs_1.Helper.Executor(this._tblProps.columns, function (col) {
            var customEvent = col.onRenderCell;
            // See if this is the type column
            if (col.name == "Type") {
                // Set the event to render an icon
                col.onRenderCell = function (el, col, file) {
                    // Render the file
                    _this.renderFileIcon(el, _this.getFileName(file));
                    // Set the filter/sort value
                    el.setAttribute("data-filter", (0, methods_1.getFileExt)(_this.getFileName(file)));
                    el.setAttribute("data-sort", (0, methods_1.getFileExt)(_this.getFileName(file)));
                    // Call the custom event
                    customEvent ? customEvent(el, col, file) : null;
                };
            }
            // Else, see if this is the file size
            else if (col.name == "FileSize") {
                // Set the event to render the size
                col.onRenderCell = function (el, col, file) {
                    // Render the file size value
                    el.innerHTML = (0, methods_1.formatBytes)(file.Length);
                    // Set the sort value
                    el.setAttribute("data-sort", file.Length.toString());
                    // Call the custom event
                    customEvent ? customEvent(el, col, file) : null;
                };
            }
            // Else, see if this is a date/time field
            else if (col.name == "Created" || col.name == "Modified") {
                // Set the event to render the size
                col.onRenderCell = function (el, col, file) {
                    // Render the date/time value
                    var value = col.name == "Created" ? file.TimeCreated : file.TimeLastModified;
                    el.innerHTML = (0, methods_1.formatTimeValue)(value);
                    // Set the date/time filter/sort values
                    el.setAttribute("data-filter", moment(value).format("dddd MMMM DD YYYY"));
                    el.setAttribute("data-sort", value);
                    // Call the custom event
                    customEvent ? customEvent(el, col, file) : null;
                };
            }
            // Else, see if this is a user field
            else if (col.name == "Author" || col.name == "ModifiedBy") {
                // Set the event to render the size
                col.onRenderCell = function (el, col, file) {
                    // Render the Person field Title
                    el.innerHTML = (file[col.name] ? file[col.name]["Title"] : null) || "";
                    // Call the custom event
                    customEvent ? customEvent(el, col, file) : null;
                };
            }
            // Else, see if this is the "actions" buttons
            else if (col.name == "Actions") {
                // Set the event to render the size
                col.onRenderCell = function (el, col, file) {
                    // Render the action buttons
                    _this.renderActionButtons(el, file);
                    // Call the custom event
                    customEvent ? customEvent(el, col, file) : null;
                    _this._props.onActionsRendered ? _this._props.onActionsRendered(el, col, file) : null;
                };
            }
            else {
                // Set the default render event
                col.onRenderCell = function (el, col, file) {
                    // Set the value
                    el.innerHTML = file[col.name] ||
                        (file.ListItemAllFields && file.ListItemAllFields.FieldValuesAsText[col.name]) || "";
                    // Call the custom event
                    customEvent ? customEvent(el, col, file) : null;
                };
            }
        });
    };
    // Gets the file name
    Documents.prototype.getFileName = function (file) {
        // Return the file name
        return file.Name || file.FileName;
    };
    // Determines if the document can be viewed in office online servers
    Documents.isWopi = function (filename) {
        switch ((0, methods_1.getFileExt)(filename)) {
            // Excel
            case "csv":
            case "doc":
            case "docx":
            case "dot":
            case "dotx":
            case "pot":
            case "potx":
            case "pps":
            case "ppsx":
            case "ppt":
            case "pptx":
            case "xls":
            case "xlsx":
            case "xlt":
            case "xltx":
                return true;
            // Default
            default: {
                return false;
            }
        }
    };
    // Loads the data
    Documents.prototype.load = function () {
        var _this = this;
        // Return a promise
        return new Promise(function (resolve, reject) {
            var web = (0, gd_sprest_bs_1.Web)(_this._props.webUrl);
            // Clear the properties
            _this._rootFolder = null;
            _this._templateFolders = null;
            _this._templatesFiles = null;
            // See if the templates library was set
            if (_this._props.templatesUrl) {
                // Load the files and folders
                web.getFolderByServerRelativeUrl(_this._props.templatesUrl).query({
                    Expand: ["Folders/Files", "Files"]
                }).execute(
                // Templates folder exists
                function (folder) {
                    // Set the template files
                    _this._templatesFiles = folder.Files.results;
                    // Set the template folders
                    _this._templateFolders = folder.Folders.results;
                }, 
                // Error loading the templates folder
                function () {
                    // Log
                    console.error("[Dattatable] Document's template folder failed to be loaded.", _this._props.templatesUrl);
                });
            }
            // Set the query
            var query = _this._props.query || {};
            query.Expand = (query.Expand ? query.Expand : []).concat([
                "Folders/Files", "Folders/Files/Author",
                "Folders/Files/ListItemAllFields", "Folders/Files/ListItemAllFields/FieldValuesAsText",
                "Folders/Files/ModifiedBy", "Files", "Files/Author", "Files/ListItemAllFields",
                "Files/ListItemAllFields/FieldValuesAsText", "Files/ModifiedBy"
            ]);
            // See if we are targeting a document set folder
            if (_this.IsDocSet) {
                web.Lists(_this._props.listName).Items(_this._props.docSetId).Folder().query(query).execute(function (folder) {
                    // Set the root folder
                    _this._rootFolder = folder;
                }, reject);
            }
            // Else, see if we are targeting list item attachments
            else if (_this.IsAttachment) {
                web.Lists(_this._props.listName).Items(_this._props.itemId).AttachmentFiles().execute(function (attachments) {
                    // Set the attachments
                    _this._attachments = attachments.results;
                }, reject);
            }
            // Else, it's a library
            else {
                // Load library information
                web.Lists(_this._props.listName).RootFolder().query(query).execute(function (folder) {
                    // Set the root folder
                    _this._rootFolder = folder;
                }, reject);
            }
            // Wait for the requests to complete
            web.done(function () {
                // Resolve the request
                resolve();
            });
        });
    };
    // Renders the component
    Documents.prototype.render = function () {
        var _this = this;
        // Return a promise
        return new Promise(function (resolve, reject) {
            // Load the data
            _this.load().then(function () {
                // Render the navigation
                _this.renderNavigation();
                // Render the table
                _this.renderTable();
                // Call the render event
                _this._props.onRendered ? _this._props.onRendered(_this._el) : null;
                // Resolve the promise
                resolve();
            }, reject);
        });
    };
    // Renders the file actions
    Documents.prototype.renderActionButtons = function (el, file) {
        // Create a span to wrap the icons in
        var span = document.createElement("span");
        span.className = "bg-white d-inline-flex ms-2 rounded";
        var spanEdit = span.cloneNode();
        var spanProps = span.cloneNode();
        var spanDownload = span.cloneNode();
        var spanDel = span.cloneNode();
        spanDel.classList.add("me-1");
        // Add the icons
        el.appendChild(span);
        el.appendChild(spanEdit);
        this.IsAttachment ? null : el.appendChild(spanProps);
        el.appendChild(spanDownload);
        el.appendChild(spanDel);
        // Render the buttons
        span.appendChild(this.generateButton(ActionButtonTypes.View, file));
        spanEdit.appendChild(this.generateButton(ActionButtonTypes.Edit, file));
        this.IsAttachment ? null : spanProps.appendChild(this.generateButton(ActionButtonTypes.Properties, file));
        spanDownload.appendChild(this.generateButton(ActionButtonTypes.Download, file));
        spanDel.appendChild(this.generateButton(ActionButtonTypes.Delete, file));
    };
    Documents.prototype.generateButton = function (btnType, file) {
        var _this = this;
        var isWopi = Documents.isWopi(this.getFileName(file));
        // Render the button based on the type
        switch (btnType) {
            case ActionButtonTypes.Delete:
                return gd_sprest_bs_1.Components.Tooltip({
                    content: "Delete",
                    btnProps: {
                        // Render the icon button
                        className: "p-1 btn-actions-delete",
                        iconType: x_1.x,
                        iconSize: 24,
                        isDisabled: !this.CanDelete,
                        type: gd_sprest_bs_1.Components.ButtonTypes.OutlineSecondary,
                        onClick: function () {
                            if (_this.CanDelete) {
                                // Confirm we want to delete the item
                                if (confirm("Are you sure you want to delete this document?")) {
                                    // Display a loading dialog
                                    loadingDialog_1.LoadingDialog.setHeader("Deleting Document");
                                    loadingDialog_1.LoadingDialog.setBody("Deleting Document: " + _this.getFileName(file) + ". This will close afterwards.");
                                    loadingDialog_1.LoadingDialog.show();
                                    // Delete the document
                                    (0, gd_sprest_bs_1.Web)(_this._props.webUrl).getFileByServerRelativeUrl(file.ServerRelativeUrl).delete().execute(
                                    // Success
                                    function () {
                                        // close dialog
                                        loadingDialog_1.LoadingDialog.hide();
                                        // Refresh the page                         
                                        _this.refresh();
                                    }, 
                                    // Error
                                    function (err) {
                                        // TODO
                                    });
                                }
                            }
                        }
                    },
                }).el;
            case ActionButtonTypes.Download:
                return gd_sprest_bs_1.Components.Tooltip({
                    content: "Download",
                    btnProps: {
                        // Render the icon button
                        className: "p-1 btn-actions-download",
                        iconType: fileEarmarkArrowDown_1.fileEarmarkArrowDown,
                        iconSize: 24,
                        isDisabled: !this.CanView,
                        type: gd_sprest_bs_1.Components.ButtonTypes.OutlineSecondary,
                        onClick: function () {
                            if (_this.CanView) {
                                window.open(gd_sprest_bs_1.ContextInfo.webServerRelativeUrl + "/_layouts/15/download.aspx?SourceUrl=" + file.ServerRelativeUrl, "_blank");
                            }
                        }
                    },
                }).el;
            case ActionButtonTypes.Edit:
                return gd_sprest_bs_1.Components.Tooltip({
                    content: "Edit",
                    btnProps: {
                        // Render the icon button
                        className: "p-1 btn-actions-edit",
                        iconType: inputCursorText_1.inputCursorText,
                        iconSize: 24,
                        isDisabled: (!isWopi || !this.CanEdit),
                        type: gd_sprest_bs_1.Components.ButtonTypes.OutlineSecondary,
                        onClick: function () {
                            if (isWopi && _this.CanEdit) {
                                // Open the file in a new tab
                                window.open(gd_sprest_bs_1.ContextInfo.webServerRelativeUrl + "/_layouts/15/WopiFrame.aspx?sourcedoc=" + file.ServerRelativeUrl + "&action=edit");
                            }
                        }
                    },
                }).el;
            case ActionButtonTypes.Properties:
                return gd_sprest_bs_1.Components.Tooltip({
                    content: "Properties",
                    btnProps: {
                        // Render the icon button
                        className: "p-1 btn-actions-properties",
                        iconType: layoutTextSidebar_1.layoutTextSidebar,
                        iconSize: 24,
                        isDisabled: !this.CanEdit && !this.CanView,
                        type: gd_sprest_bs_1.Components.ButtonTypes.OutlineSecondary,
                        onClick: function () {
                            // Set the item form properties
                            itemForm_1.ItemForm.ListName = _this._props.listName;
                            itemForm_1.ItemForm.UseModal = false;
                            // Ensure the user can edit the item
                            if (_this.CanEdit) {
                                // Define the properties
                                var editProps = __assign(__assign({}, (_this._props.onItemFormEditing || {})), {
                                    // Set the item id
                                    itemId: file.ListItemAllFields["Id"],
                                    // Set the edit form properties
                                    onCreateEditForm: function (props) {
                                        // Set the rendering event
                                        props.onControlRendering = function (ctrl, field) {
                                            if (field.InternalName == "FileLeafRef") {
                                                // Validate the name of the file
                                                ctrl.onValidate = function (ctrl, results) {
                                                    var _a;
                                                    // Ensure the value is less than 128 characters
                                                    if (((_a = results.value) === null || _a === void 0 ? void 0 : _a.length) > 128) {
                                                        // Return an error message
                                                        results.invalidMessage = "The file name must be less than 128 characters.";
                                                        results.isValid = false;
                                                    }
                                                    // Return the results
                                                    return results;
                                                };
                                            }
                                            else if (field.InternalName == "Title") {
                                                // Update the label of the Title field
                                                ctrl.label = "Description";
                                            }
                                        };
                                        // See if a custom event exists
                                        if (_this._props.onItemFormEditing && _this._props.onItemFormEditing.onCreateEditForm) {
                                            // Return the properties
                                            return _this._props.onItemFormEditing.onCreateEditForm(props);
                                        }
                                        // Return the properties
                                        return props;
                                    },
                                    // Update the footer
                                    onSetFooter: function (el) {
                                        var updateBtn = el.querySelector('[role="group"]').firstChild;
                                        updateBtn.classList.remove("btn-outline-primary");
                                        updateBtn.classList.add("btn-primary");
                                        // See if a custom event exists
                                        if (_this._props.onItemFormEditing && _this._props.onItemFormEditing.onSetFooter) {
                                            // Execute the event
                                            _this._props.onItemFormEditing.onSetFooter(el);
                                        }
                                    },
                                    // Update the header
                                    onSetHeader: function (el) {
                                        // Update the header
                                        el.querySelector("h5").innerHTML = "Properties";
                                        // See if a custom event exists
                                        if (_this._props.onItemFormEditing && _this._props.onItemFormEditing.onSetHeader) {
                                            // Execute the event
                                            _this._props.onItemFormEditing.onSetHeader(el);
                                        }
                                    },
                                    // Refresh the view when updates occur
                                    onUpdate: function (item) {
                                        // See if a custom event exists
                                        if (_this._props.onItemFormEditing && _this._props.onItemFormEditing.onUpdate) {
                                            // Execute the event
                                            _this._props.onItemFormEditing.onUpdate(item);
                                        }
                                        else {
                                            // Refresh the data table
                                            _this.refresh();
                                        }
                                    }
                                });
                                // Show the edit form
                                itemForm_1.ItemForm.edit(editProps);
                            }
                            else {
                                // View the form
                                itemForm_1.ItemForm.view(__assign(__assign({}, (_this._props.onItemFormViewing || {})), {
                                    itemId: file.ListItemAllFields["Id"],
                                    // Set the view form properties
                                    onCreateViewForm: function (props) {
                                        // Set the rendering event
                                        props.onControlRendering = function (ctrl, field) {
                                            if (field.InternalName == "Title") {
                                                // Update the label of the Title field
                                                ctrl.label = "Description";
                                            }
                                        };
                                        // See if a custom event exists
                                        if (_this._props.onItemFormViewing && _this._props.onItemFormViewing.onCreateViewForm) {
                                            // Return the properties
                                            return _this._props.onItemFormViewing.onCreateViewForm(props);
                                        }
                                        // Return the properties
                                        return props;
                                    }
                                }));
                            }
                        }
                    }
                }).el;
            case ActionButtonTypes.View:
                return gd_sprest_bs_1.Components.Tooltip({
                    content: "View",
                    btnProps: {
                        // Render the icon button
                        className: "img-flip-x p-1 btn-actions-view",
                        iconType: front_1.front,
                        iconSize: 24,
                        isDisabled: !this.CanView,
                        type: gd_sprest_bs_1.Components.ButtonTypes.OutlineSecondary,
                        onClick: function () {
                            if (_this.CanView) {
                                // Open the file in a new tab
                                window.open(isWopi ? gd_sprest_bs_1.ContextInfo.webServerRelativeUrl + "/_layouts/15/WopiFrame.aspx?sourcedoc=" + file.ServerRelativeUrl + "&action=view" : file.ServerRelativeUrl, "_blank");
                            }
                        }
                    },
                }).el;
        }
    };
    // Renders the file icon
    Documents.prototype.renderFileIcon = function (el, fileName) {
        // Render the icon wrapper
        var span = document.createElement("span");
        span.className = "text-muted";
        el.appendChild(span);
        // Render the icon
        var size = 28;
        switch ((0, methods_1.getFileExt)(fileName)) {
            // Power BI
            case "pbix":
                span.appendChild((0, fileEarmarkBarGraph_1.fileEarmarkBarGraph)(size));
                span.title = "Power BI Report";
                break;
            // Binary
            case "bin":
            case "blg":
            case "dat":
            case "dmg":
            case "dmp":
            case "log":
            case "pbi":
                span.appendChild((0, fileEarmarkBinary_1.fileEarmarkBinary)(size));
                span.title = "Binary File";
                break;
            // Code
            case "app":
            case "asp":
            case "aspx":
            case "css":
            case "hta":
            case "htm":
            case "html":
            case "js":
            case "json":
            case "mht":
            case "mhtml":
            case "scss":
            case "sppkg":
            case "wsp":
            case "xml":
            case "yaml":
                span.appendChild((0, fileEarmarkCode_1.fileEarmarkCode)(size));
                span.title = "Code";
                break;
            // Excel
            case "csv":
            case "ods":
            case "xls":
            case "xlsx":
            case "xlt":
            case "xltx":
                span.appendChild((0, fileEarmarkExcel_1.fileEarmarkExcel)(size));
                span.title = "Excel Spreadsheet";
                break;
            // Image
            case "ai":
            case "bmp":
            case "eps":
            case "gif":
            case "heic":
            case "heif":
            case "jpe":
            case "jpeg":
            case "jpg":
            case "png":
            case "psd":
            case "svg":
            case "tif":
            case "tiff":
            case "webp":
                span.appendChild((0, fileEarmarkImage_1.fileEarmarkImage)(size));
                span.title = "Image";
                break;
            // Audio
            case "aac":
            case "aiff":
            case "alac":
            case "flac":
            case "m4a":
            case "m4p":
            case "mka":
            case "mp3":
            case "mp4a":
            case "wav":
            case "wma":
                span.appendChild((0, fileEarmarkMusic_1.fileEarmarkMusic)(size));
                span.title = "Audio File";
                break;
            // PDF
            case "pdf":
                span.appendChild((0, fileEarmarkPdf_1.fileEarmarkPdf)(size));
                span.title = "Adobe PDF";
                break;
            // PowerPoint
            case "odp":
            case "pot":
            case "potx":
            case "pps":
            case "ppsx":
            case "ppt":
            case "pptx":
                span.appendChild((0, fileEarmarkPpt_1.fileEarmarkPpt)(size));
                span.title = "PowerPoint Presentation";
                break;
            // Media
            case "avi":
            case "flv":
            case "m2ts":
            case "mkv":
            case "mov":
            case "m4p":
            case "m4v":
            case "mp4":
            case "mpe":
            case "mpeg":
            case "mpg":
            case "mpv":
            case "qt":
            case "ts":
            case "vob":
            case "webm":
            case "wmv":
                span.appendChild((0, fileEarmarkPlay_1.fileEarmarkPlay)(size));
                span.title = "Media File";
                break;
            // Rich Text
            case "rtf":
                span.appendChild((0, fileEarmarkRichtext_1.fileEarmarkRichtext)(size));
                span.title = "Rich Text";
                break;
            // Database
            case "ldf":
            case "mdb":
            case "mdf":
                span.appendChild((0, fileEarmarkSpreadsheet_1.fileEarmarkSpreadsheet)(size));
                span.title = "Database";
                break;
            // Text
            case "md":
            case "text":
            case "txt":
                span.appendChild((0, fileEarmarkText_1.fileEarmarkText)(size));
                span.title = "Text";
                break;
            // Word
            case "doc":
            case "docx":
            case "dot":
            case "dotx":
            case "odt":
            case "wpd":
                span.appendChild((0, fileEarmarkWord_1.fileEarmarkWord)(size));
                span.title = "Word Document";
                break;
            // Compressed
            case "7z":
            case "cab":
            case "gz":
            case "iso":
            case "rar":
            case "tgz":
            case "zip":
                span.appendChild((0, fileEarmarkZip_1.fileEarmarkZip)(size));
                span.title = "Compressed Folder";
                break;
            // Default
            default: {
                span.appendChild((0, fileEarmark_1.fileEarmark)(size));
                span.title = "File";
            }
        }
    };
    // Renders the navigation
    Documents.prototype.renderNavigation = function () {
        var _this = this;
        var itemsEnd = [];
        // See if templates exist
        if (this.TemplateFiles && this.TemplateFolders) {
            // Add the item
            itemsEnd.push({
                text: "Templates",
                className: "btn btn-sm btn-outline-secondary",
                classNameItem: "bg-white",
                iconClassName: "btn-icon-sm",
                iconSize: 20,
                iconType: fileEarmarkPlus_1.fileEarmarkPlus,
                isButton: true,
                items: this.generateItems()
            });
        }
        // Add the upload button
        itemsEnd.push({
            text: "Upload",
            onRender: function (el, item) {
                // Clear the existing button
                el.innerHTML = "";
                // Create a span to wrap the icon in
                var span = document.createElement("span");
                span.className = "bg-white d-inline-flex ms-2 rounded";
                el.appendChild(span);
                // Render a tooltip
                gd_sprest_bs_1.Components.Tooltip({
                    el: span,
                    content: item.text,
                    btnProps: {
                        // Render the icon button
                        className: "p-1",
                        iconType: fileEarmarkArrowUp_1.fileEarmarkArrowUp,
                        iconSize: 24,
                        type: gd_sprest_bs_1.Components.ButtonTypes.OutlineSecondary,
                        onClick: function () {
                            // Show the file upload dialog
                            gd_sprest_bs_1.Helper.ListForm.showFileDialog().then(function (fileInfo) {
                                // Code to run after the event
                                var onCompleted = function (fileInfo) {
                                    // Show a loading dialog
                                    loadingDialog_1.LoadingDialog.setHeader("Uploading File");
                                    loadingDialog_1.LoadingDialog.setBody("Saving the file you selected. Please wait...");
                                    loadingDialog_1.LoadingDialog.show();
                                    // Upload the file
                                    _this.uploadFile(fileInfo).then(
                                    // Success
                                    function (file) {
                                        // Call the event
                                        _this._props.onFileAdded ? _this._props.onFileAdded(file) : null;
                                        // Hide the dialog
                                        loadingDialog_1.LoadingDialog.hide();
                                        // Refresh the page
                                        _this.refresh();
                                    }, 
                                    // Error
                                    function () {
                                        // Hide the dialog
                                        loadingDialog_1.LoadingDialog.hide();
                                    });
                                };
                                // Call the file adding event
                                var returnVal = _this._props.onFileAdding ? _this._props.onFileAdding(fileInfo) : null;
                                if (typeof (returnVal) === "boolean") {
                                    // Add the file
                                    returnVal ? onCompleted(fileInfo) : null;
                                }
                                // Else, see if it doesn't exist
                                else if (returnVal == null) {
                                    // Add the file
                                    onCompleted(fileInfo);
                                }
                                else if (returnVal.then) {
                                    // Wait for the event to complete
                                    returnVal.then(function (addFile) {
                                        // Add the file
                                        addFile ? onCompleted(fileInfo) : null;
                                    });
                                }
                            });
                        }
                    },
                });
            }
        });
        // Set the default properties
        var navProps = {
            el: this._el,
            brand: "Documents",
            itemsEnd: itemsEnd,
            searchBox: this._props.enableSearch ? {
                hideButton: true,
                onChange: function (value) {
                    // Search the data table
                    _this._dt.search(value);
                },
                onSearch: function (value) {
                    // Search the data table
                    _this._dt.search(value);
                }
            } : null
        };
        // Call the rendering event
        this._props.onNavigationRendering ? this._props.onNavigationRendering(navProps) : null;
        // Create the navbar
        this._navbar = gd_sprest_bs_1.Components.Navbar(navProps);
        /* Fix the padding on the left & right of the nav */
        this._navbar.el.querySelector("div.container-fluid").classList.add("ps-75");
        this._navbar.el.querySelector("div.container-fluid").classList.add("pe-2");
        // See if we are showing the filter
        if (this._props.onShowFilter) {
            // Render the filter icon
            var icon = document.createElement("div");
            icon.classList.add("filter-icon");
            icon.classList.add("nav-link");
            icon.classList.add("text-dark");
            icon.style.cursor = "pointer";
            icon.appendChild((0, filterSquare_1.filterSquare)());
            this._props.onShowFilter ? icon.addEventListener("click", this._props.onShowFilter) : null;
            this._navbar.el.firstElementChild.appendChild(icon);
            // Call the render event
            this._props.onFilterRendered ? this._props.onFilterRendered(icon) : null;
        }
        // Call the render events
        this._props.onSearchRendered ? this._props.onSearchRendered(this._navbar.el.querySelector("input[type='search']")) : null;
        this._props.onNavigationRendered ? this._props.onNavigationRendered(this.Navigation) : null;
    };
    // Renders the datatable with the file information
    Documents.prototype.renderTable = function () {
        // Create the element
        var el = document.createElement("div");
        this._el.appendChild(el);
        this._tblProps.el = el;
        // Set the data
        this._tblProps.rows = this.Attachments || this.Files;
        // Call the rendering event
        this._props.table && this._props.table.onRendering ? this._props.table.onRendering(this._tblProps) : null;
        // Render the table
        this._dt = new table_1.DataTable(this._tblProps);
        // Call the rendered event
        this._tblProps.onRendered ? this._tblProps.onRendered(el, this._dt.datatable) : null;
    };
    // Uploads a file
    Documents.prototype.uploadFile = function (fileInfo) {
        var _this = this;
        // Return a promise
        return new Promise(function (resolve, reject) {
            var list = (0, gd_sprest_bs_1.List)(_this._props.listName);
            // See if this is an attachment
            if (_this.IsAttachment) {
                // Upload the attachment
                list.Items(_this._props.itemId).AttachmentFiles().add(fileInfo.name, fileInfo.data).execute(resolve, reject);
            }
            else {
                // Upload the file to the objective folder
                (0, gd_sprest_bs_1.Web)(_this._props.webUrl).getFolderByServerRelativeUrl(_this._rootFolder.ServerRelativeUrl).Files().add(fileInfo.name, true, fileInfo.data).execute(resolve, reject);
            }
        });
    };
    /** Public Methods */
    // Generates an action button
    Documents.prototype.generateActionButton = function (btnType, file) {
        // Return the button
        return this.generateButton(btnType, file);
    };
    // Refreshes the documents
    Documents.prototype.refresh = function () {
        var _this = this;
        // Show a loading dialog
        loadingDialog_1.LoadingDialog.setHeader("Reloading Workspace");
        loadingDialog_1.LoadingDialog.setBody("Reloading the workspace data. This will close afterwards.");
        loadingDialog_1.LoadingDialog.show();
        // Clear the element
        while (this._el.firstChild) {
            this._el.removeChild(this._el.firstChild);
        }
        // Render the component
        this.render().then(function () {
            // Call the event
            _this._props.onRefresh ? _this._props.onRefresh() : null;
            // Hide the dialog
            loadingDialog_1.LoadingDialog.hide();
        });
    };
    // Searches the data table
    Documents.prototype.search = function (value) {
        // Search the table data
        this._dt.search(value);
    };
    return Documents;
}());
exports.Documents = Documents;
