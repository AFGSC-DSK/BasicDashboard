"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dashboard = void 0;
var gd_sprest_bs_1 = require("gd-sprest-bs");
var itemForm_1 = require("../itemForm");
var filter_1 = require("./filter");
var footer_1 = require("./footer");
var header_1 = require("./header");
var navigation_1 = require("./navigation");
var table_1 = require("./table");
// Export the components
__exportStar(require("./filter"), exports);
__exportStar(require("./footer"), exports);
__exportStar(require("./header"), exports);
__exportStar(require("./navigation"), exports);
__exportStar(require("./table"), exports);
/**
 * Dashboard
 */
var Dashboard = /** @class */ (function () {
    // Constructor
    function Dashboard(props) {
        this._dt = null;
        this._filters = null;
        this._props = null;
        // Set the properties
        this._props = props;
        // Set the flag
        typeof (props.useModal) === "boolean" ? itemForm_1.ItemForm.UseModal = props.useModal : null;
        // Render the dashboard
        this.render();
        // Call the render event
        props.onRendered ? props.onRendered(this._props.el) : null;
    }
    // Renders the component
    Dashboard.prototype.render = function () {
        var _this = this;
        // Create the filters
        this._filters = new filter_1.FilterSlideout({
            filters: this._props.filters ? this._props.filters.items : [],
            onClear: this._props.filters ? this._props.filters.onClear : null,
            onRendered: this._props.filters ? this._props.filters.onRendered : null
        });
        // Render the template
        var elTemplate = document.createElement("div");
        elTemplate.classList.add("dashboard");
        elTemplate.innerHTML = "\n        <div class=\"row\">\n            <div id=\"navigation\" class=\"col\"></div>\n        </div>\n        <div class=\"row\">\n            <div id=\"header\" class=\"col mx-75\"></div>\n        </div>\n        <div class=\"row\">\n            <div id=\"sub-navigation\" class=\"col\"></div>\n        </div>\n        <div class=\"row\">\n            <div id=\"datatable\" class=\"col\"></div>\n        </div>\n        <div class=\"row\">\n            <div id=\"footer\" class=\"col\"></div>\n        </div>".trim();
        this._props.el.appendChild(elTemplate);
        // Set/Default the visibility flags
        var headerIsVisible = this._props.hideHeader != null && !this._props.hideHeader;
        var navIsVisible = this._props.hideNavigation ? false : true;
        var subNavIsVisible = (this._props.hideSubNavigation == null || this._props.hideSubNavigation == true) && this._props.subNavigation == null ? false : true;
        // See if we are hiding the navigation
        if (!navIsVisible) {
            // Hide the element
            this._props.el.querySelector("#navigation").classList.add("d-none");
        }
        else {
            // Render the navigation
            var navProps_1 = this._props.navigation || {};
            new navigation_1.Navigation({
                el: this._props.el.querySelector("#navigation"),
                hideFilter: navProps_1.showFilter != null ? !navProps_1.showFilter : false,
                hideSearch: navProps_1.showSearch != null ? !navProps_1.showSearch : false,
                items: navProps_1.items,
                itemsEnd: navProps_1.itemsEnd,
                title: navProps_1.title,
                onFilterRendered: navProps_1.onFilterRendered,
                onRendering: function (props) {
                    // Set the default classname
                    props.className = props.className || ("bg-sharepoint rounded" + (headerIsVisible || subNavIsVisible ? "-top" : ""));
                    // Set the default type
                    props.type = typeof (props.type) === "number" ? props.type : gd_sprest_bs_1.Components.NavbarTypes.Dark;
                    // Call the rendering event if it exists
                    navProps_1.onRendering ? navProps_1.onRendering(props) : null;
                },
                onRendered: navProps_1.onRendered,
                onSearch: function (value) {
                    // Search the data table
                    _this._dt.search(value);
                },
                onSearchRendered: navProps_1.onSearchRendered,
                onShowFilter: function () {
                    // Show the filter
                    _this._filters.show();
                    // Call the event
                    navProps_1.onShowFilter ? navProps_1.onShowFilter() : null;
                },
            });
        }
        // See if we are hiding the header
        if (!headerIsVisible) {
            // Hide the element
            this._props.el.querySelector("#header").classList.add("d-none");
        }
        else {
            var elHeader = this._props.el.querySelector("#header");
            // Render the header
            var header = this._props.header || {};
            new header_1.Header({
                el: elHeader,
                onRendering: this._props.header ? this._props.header.onRendering : null,
                onRendered: this._props.header ? this._props.header.onRendered : null,
                title: header.title
            });
            // See if the sub-nav is not visible
            if (!navIsVisible && !subNavIsVisible) {
                // Set the class name
                elHeader.classList.add("rounded");
            }
            else if (navIsVisible && !subNavIsVisible) {
                // Set the class name
                elHeader.classList.add("rounded-bottom");
            }
            else if (!navIsVisible && subNavIsVisible) {
                // Set the class name
                elHeader.classList.add("rounded-top");
            }
        }
        // See if we are hiding the sub-navigation
        if (!subNavIsVisible) {
            // Hide the element
            this._props.el.querySelector("#sub-navigation").classList.add("d-none");
        }
        else {
            // Render the navigation
            var navProps_2 = this._props.subNavigation || {};
            new navigation_1.Navigation({
                el: this._props.el.querySelector("#sub-navigation"),
                hideFilter: navProps_2.showFilter != null ? !navProps_2.showFilter : true,
                hideSearch: navProps_2.showSearch != null ? !navProps_2.showSearch : true,
                items: navProps_2.items,
                itemsEnd: navProps_2.itemsEnd,
                title: navProps_2.title,
                onFilterRendered: navProps_2.onFilterRendered,
                onRendering: function (props) {
                    // Set the default classname
                    props.className = props.className || ("rounded" + (!headerIsVisible && !navIsVisible ? "" : "-bottom"));
                    props.className = "sub-nav " + props.className;
                    // Set the default type
                    props.type = typeof (props.type) === "number" ? props.type : gd_sprest_bs_1.Components.NavbarTypes.Light;
                    // Call the rendering event if it exists
                    navProps_2.onRendering ? navProps_2.onRendering(props) : null;
                },
                onRendered: navProps_2.onRendered,
                onSearch: function (value) {
                    // Search the data table
                    _this._dt.search(value);
                },
                onShowFilter: function () {
                    // Show the filter
                    _this._filters.show();
                },
            });
        }
        // Render the data table
        this._dt = new table_1.DataTable({
            columns: this._props.table ? this._props.table.columns : null,
            dtProps: this._props.table ? this._props.table.dtProps : null,
            el: this._props.el.querySelector("#datatable"),
            onRendered: this._props.table ? this._props.table.onRendered : null,
            rows: this._props.table ? this._props.table.rows : null
        });
        // See if we are hiding the footer
        if (this._props.hideFooter) {
            // Hide the element
            this._props.el.querySelector("#footer").classList.add("d-none");
        }
        else {
            // Render the footer
            var footer = this._props.footer || {};
            new footer_1.Footer({
                el: this._props.el.querySelector("#footer"),
                items: footer.items,
                itemsEnd: footer.itemsEnd,
                onRendering: footer.onRendering,
                onRendered: footer.onRendered
            });
        }
    };
    /**
     * Public Interface
     */
    // Filter the table
    Dashboard.prototype.filter = function (idx, value) {
        // Filter the table
        this._dt.filter(idx, value);
    };
    // Returns a filter checkbox group by its key
    Dashboard.prototype.getFilter = function (key) { return this._filters.getFilter(key); };
    // Hides the filter
    Dashboard.prototype.hideFilter = function () { this._filters.hide(); };
    // Refresh the table
    Dashboard.prototype.refresh = function (rows) {
        // Refresh the table
        this._dt.refresh(rows);
    };
    // Search the table
    Dashboard.prototype.search = function (value) {
        // Search the table
        this._dt.search(value);
    };
    // Sets a filter checkbox group value
    Dashboard.prototype.setFilterValue = function (key, value) { return this._filters.setFilterValue(key, value); };
    // Shows the filter
    Dashboard.prototype.showFilter = function () { this._filters.show(); };
    return Dashboard;
}());
exports.Dashboard = Dashboard;
